# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build Package
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '3.1.x'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: '**/EngineTests.csproj'
        arguments: '--collect:"XPlat Code Coverage"'
        testRunTitle: 'Platform Unit tests'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/Engine.csproj'
    - task: CopyFiles@2
      inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '**/coverage.cobertura.xml'
          TargetFolder: '$(Build.SourcesDirectory)/codeCoverage'
          flattenFolders: true
    - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:"$(Build.SourcesDirectory)/codeCoverage/coverage.cobertura.xml" -targetdir:"$(Build.SourcesDirectory)/CodeCoverage" -reporttypes:"HtmlInline_AzurePipelines"
      displayName: Create Code coverage report
    - task: PublishCodeCoverageResults@1
      inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: $(Build.SourcesDirectory)/codeCoverage/coverage.cobertura.xml'
          reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
          failIfCoverageEmpty: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'pack'
        packagesToPack: '**/Engine.csproj'
        versioningScheme: 'byPrereleaseNumber'
        majorVersion: '1'
        minorVersion: '0'
        patchVersion: '0'
    - task: PublishBuildArtifacts@1
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'package'
        publishLocation: 'Container'
